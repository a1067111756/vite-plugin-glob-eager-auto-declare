{
  "compilerOptions": {
    /* common */
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    // 指定ECMAScript目标版本
    "target": "es2020",
    // 指定生成哪个模块系统代码
    "module": "es2020",
    // 允许包含 JavaScript 文件
    "allowJs": true,
    // 生成相应的 .map文件。
    "sourceMap": false,
    // 跳过对node_modules的检查
    "skipLibCheck": true,
    // 允许使用 ES6 的模块语法
    "esModuleInterop": true,

    /* Bundler mode */
    // 禁止生成输出文件，只进行类型检查
    "noEmit": true,
    // 保留 JSX 语法，不将其转换为普通的 JavaScript
    "jsx": "preserve",
    // 使每个文件成为孤立的模块，可减少相互干扰
    "isolatedModules": true,
    // 解析 JSON 文件作为模块
    "resolveJsonModule": true,
    // 决定如何处理模块
    "moduleResolution": "bundler",
    // 允许导入没有设置默认导出的模块
    "allowImportingTsExtensions": true,
    // 允许从没有设置默认导出的模块中默认导入
    "allowSyntheticDefaultImports": true,

    /* Linting */
    // 启用所有严格类型检查选项。
    "strict": true,
    // 禁止未使用的局部变量
    "noUnusedLocals": true,
    // 允许隐式的 any 类型
    "noImplicitAny": false,
    // 禁止未使用的函数参数
    "noUnusedParameters": true,
    // 忽略来自版本 5.0 的废弃警告
    "ignoreDeprecations": "5.0",
    // 允许使用 define 语法定义类字段（直接this引用赋值，不声明）
    "useDefineForClassFields": true,
    // 在 switch 语句中禁止 fallthrough case
    "noFallthroughCasesInSwitch": true,
    // 在索引或调用表达式中忽略隐式的 any 错误
    "suppressImplicitAnyIndexErrors": true,

    /* Declarations */
    // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）
    "importHelpers": true,
    // 定义已知类型定义的列表
    "types": ["vite/client", "node"],
    // 编译过程中需要引入的库文件的列表。
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    // 导入路径别名
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    }
  },
  // 指定需要编译的文件类型和路径
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.ts",
    "types/**/*.d.ts"
  ],
  // 排除node_modules文件类型编译
  "exclude": ["node_modules"],
  // 引用tsconfig.node
  "references": [{ "path": "./tsconfig.node.json" }]
}
